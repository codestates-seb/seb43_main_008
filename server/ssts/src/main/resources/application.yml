#spring:
#  h2:
#    console:
#      enabled: true
#      path: /h2
#  datasource:
#    url: jdbc:h2:mem:test
#    jpa:
#      hibernate:
#        ddl-auto: create
#      show-sql: true
#      database: mysql
#      properties:
#        hibernate:
#          show_sql: true
#          format_sql: true
spring:

  redis:
    host: localhost
    port: 6379

  datasource:
    #url: jdbc:mysql://ssts.coxwgsn7huq2.ap-northeast-2.rds.amazonaws.com:3306/testsstsDB?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&useLegacyDatetimeCode=false
    url: jdbc:mysql://ssts.coxwgsn7huq2.ap-northeast-2.rds.amazonaws.com:3306/sstsDB?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&useLegacyDatetimeCode=false
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database: mysql
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        jdbc:
          time_zone: Asia/Seoul
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${OAUTH_GOOGLE_CI}
            client-secret: ${OAUTH_GOOGLE_CS}
            scope:
              - email # resource owner의 이메일 정보
              - profile # resource owner의 프로필 정보

          kakao:
            client-id: ${OAUTH_KAKAO_CI}
            client-secret: ${OAUTH_KAKAO_CS}
            client-authentication-method: POST
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            authorization-grant-type: authorization_code
            scope:
              - account_email

          naver:
            client-id: ${OAUTH_NAVER_CI}
            client-secret: ${OAUTH_NAVER_CS}
            client-authentication-method: POST
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            authorization-grant-type: authorization_code
            scope:
              - email

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response


#logging:
#  level:
#    root: DEBUG
servlet:
  multipart:
    max-file-size: 5MB
    max-request-size: 5MB  #이미지 파일 업로드 최대 용량제한


server:
  servlet:
    encoding:
      force-response: true

    session:
      cookie:
        same-site: none
#  ssl:
#    key-store-password: ${SSL_PASSWORD}
#    key-store-type: PKCS12
#    key-store: classpath:.keystores
#    enabled: true
#  port: 8443



jwt:
  key:
    secret: ${JWT_SECRET_KEY}
  access-token-expiration-minutes: 60
  refresh-token-expiration-minutes: 360 #분 단위


cloud:
  aws:
    s3:
      bucket: ssts-img
    credentials:
      accessKey: ${S3Img_AK}       # AWS IAM AccessKey 적기
      secretKey: ${S3Img_SK}   # AWS IAM SecretKey 적기
       # ex) marryting-gyunny # ex) /gyunny
    region:
      static: ap-northeast-2
    stack:
      auto: false